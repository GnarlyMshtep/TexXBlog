{
  "paths": [
    {
      "type": "file",
      "value": "Basics.md"
    },
    {
      "type": "file",
      "value": "file1.md"
    },
    {
      "type": "file",
      "value": "file2.md"
    },
    {
      "type": "file",
      "value": "newblog.md"
    }
  ],
  "contents": [
    {
      "path": "Basics.md",
      "url": "Basics.html",
      "content": "<!--{\r\n    \"title\": \"Go\" ,\r\n    \"author\": \"Ishaan\",\r\n    \"tags\": [\"Go\", \"Golang\", \"Programming Language\"]\r\n}-->\r\n\r\n# Basics\r\n\r\n$$ f(x) = x^2 $$\r\n\r\n## Declaration\r\n\r\nIn package scope everything must have a keyword - func, var. Use \"var\" to declare a variable or use \":=\" short-assignment operator.\r\n\r\n``` Go\r\npackage main\r\n\r\nvar num int = 4\r\nconst Pi = 3.14 // constants - cannot use := for them\r\nconst day string = \"Monday\"\r\n\r\nvar (\r\n    num2 = 5\r\n    str string // default is \"\"\r\n)\r\n\r\nfunc declareStuff() {\r\n    num3 := 6 // can use short assignment here.\r\n    str2 := \"hi\"\r\n}\r\n```\r\n\r\n## Types\r\n\r\n* bool\r\n* string\r\n* int  int8  int16  int32  int64\r\n* uint uint8 uint16 uint32 uint64 uintptr\r\n* byte // alias for uint8\r\n* rune // alias for int32\r\n     // represents a Unicode code point\r\n* float32 float64\r\n* complex64 complex128\r\n\r\nAn \"int\", \"unint\", \"uintptr\" are 64 or 32 bits depending on the machine.\r\n\r\n### Default Values\r\n\r\n0 for numeric types, false for the boolean type, and\r\n\"\" (the empty string) for strings.\r\n\r\n### Type Conversions\r\n\r\nGo requires explicit type conversions unlike C.\r\n\r\n``` Go\r\nvar i int  = 42\r\nvar f float64 = float64(i)\r\n// or f := float64(i)\r\nvar u uint = uint(f)\r\n// Hence \r\nvar f float64 = i // this would be an error\r\n```\r\n\r\nWhen using := (short assignment) the type pf the variable depends on the **precision** of the literal. Example - 42 : int, 3.142 : float64, 0.86 + 0.5i : complex128\r\n\r\n## Control Structures\r\n\r\n### Loops\r\n\r\n``` Go\r\n// for loop\r\nfor i := 0; i < 10; i++ {\r\n    sum += i\r\n}\r\n// init and post statements are optional\r\nfor ; x < 100; {\r\n    //do something\r\n}\r\n// While in C is without init and post statements\r\nfor x < 1000 {\r\n    // this is a while loop!\r\n}\r\n```\r\n\r\n### Branching\r\n``` Go\r\nif x < 0 {\r\n    fmt.Println(\"number is negative\")\r\n}\r\n// you can add a statement in if\r\nif v := math.Pow(x, n); v < lim {\r\n    // v is scope of if\r\n}\r\n```",
      "html": "<!--{\n    \"title\": \"Go\" ,\n    \"author\": \"Ishaan\",\n    \"tags\": [\"Go\", \"Golang\", \"Programming Language\"]\n}-->\n<h1 id=\"basics\">Basics <a class=\"heading-anchor-permalink\" href=\"#basics\">#</a></h1>\n<p>$$ f(x) = x^2 $$</p>\n<h2 id=\"declaration\">Declaration <a class=\"heading-anchor-permalink\" href=\"#declaration\">#</a></h2>\n<p>In package scope everything must have a keyword - func, var. Use “var” to declare a variable or use “:=” short-assignment operator.</p>\n<pre><code class=\"language-Go\">package main\n\nvar num int = 4\nconst Pi = 3.14 // constants - cannot use := for them\nconst day string = &quot;Monday&quot;\n\nvar (\n    num2 = 5\n    str string // default is &quot;&quot;\n)\n\nfunc declareStuff() {\n    num3 := 6 // can use short assignment here.\n    str2 := &quot;hi&quot;\n}\n</code></pre>\n<h2 id=\"types\">Types <a class=\"heading-anchor-permalink\" href=\"#types\">#</a></h2>\n<ul>\n<li>bool</li>\n<li>string</li>\n<li>int  int8  int16  int32  int64</li>\n<li>uint uint8 uint16 uint32 uint64 uintptr</li>\n<li>byte // alias for uint8</li>\n<li>rune // alias for int32\n// represents a Unicode code point</li>\n<li>float32 float64</li>\n<li>complex64 complex128</li>\n</ul>\n<p>An “int”, “unint”, “uintptr” are 64 or 32 bits depending on the machine.</p>\n<h3 id=\"default-values\">Default Values <a class=\"heading-anchor-permalink\" href=\"#default-values\">#</a></h3>\n<p>0 for numeric types, false for the boolean type, and\n“” (the empty string) for strings.</p>\n<h3 id=\"type-conversions\">Type Conversions <a class=\"heading-anchor-permalink\" href=\"#type-conversions\">#</a></h3>\n<p>Go requires explicit type conversions unlike C.</p>\n<pre><code class=\"language-Go\">var i int  = 42\nvar f float64 = float64(i)\n// or f := float64(i)\nvar u uint = uint(f)\n// Hence \nvar f float64 = i // this would be an error\n</code></pre>\n<p>When using := (short assignment) the type pf the variable depends on the <strong>precision</strong> of the literal. Example - 42 : int, 3.142 : float64, 0.86 + 0.5i : complex128</p>\n<h2 id=\"control-structures\">Control Structures <a class=\"heading-anchor-permalink\" href=\"#control-structures\">#</a></h2>\n<h3 id=\"loops\">Loops <a class=\"heading-anchor-permalink\" href=\"#loops\">#</a></h3>\n<pre><code class=\"language-Go\">// for loop\nfor i := 0; i &lt; 10; i++ {\n    sum += i\n}\n// init and post statements are optional\nfor ; x &lt; 100; {\n    //do something\n}\n// While in C is without init and post statements\nfor x &lt; 1000 {\n    // this is a while loop!\n}\n</code></pre>\n<h3 id=\"branching\">Branching <a class=\"heading-anchor-permalink\" href=\"#branching\">#</a></h3>\n<pre><code class=\"language-Go\">if x &lt; 0 {\n    fmt.Println(&quot;number is negative&quot;)\n}\n// you can add a statement in if\nif v := math.Pow(x, n); v &lt; lim {\n    // v is scope of if\n}\n</code></pre>\n",
      "id": 0
    },
    {
      "path": "file1.md",
      "url": "file1.html",
      "content": "<!--{\r\n    \"title\": \"File1\" ,\r\n    \"author\": \"Ishaan\",\r\n    \"tags\": [\"dogs\", \"cats\", \"lions\"]\r\n}-->\r\n\r\n# File1 Title\r\n\r\n``` Go\r\n// This is how you declare a variable in Go\r\nvar variable int = 5\r\n```\r\n",
      "html": "<!--{\n    \"title\": \"File1\" ,\n    \"author\": \"Ishaan\",\n    \"tags\": [\"dogs\", \"cats\", \"lions\"]\n}-->\n<h1 id=\"file1-title\">File1 Title <a class=\"heading-anchor-permalink\" href=\"#file1-title\">#</a></h1>\n<pre><code class=\"language-Go\">// This is how you declare a variable in Go\nvar variable int = 5\n</code></pre>\n",
      "id": 1
    },
    {
      "path": "file2.md",
      "url": "file2.html",
      "content": "<!--{\r\n    \"title\": \"File2\" ,\r\n    \"author\": \"Matan\",\r\n    \"tags\": [\"eagle\", \"Go\", \"sparrow\", \"pigeon\"]\r\n}-->\r\n\r\n# File1 Title\r\n\r\n``` bash\r\nsudo rm -r *\r\n```\r\n",
      "html": "<!--{\n    \"title\": \"File2\" ,\n    \"author\": \"Matan\",\n    \"tags\": [\"eagle\", \"Go\", \"sparrow\", \"pigeon\"]\n}-->\n<h1 id=\"file1-title\">File1 Title <a class=\"heading-anchor-permalink\" href=\"#file1-title\">#</a></h1>\n<pre><code class=\"language-bash\">sudo rm -r *\n</code></pre>\n",
      "id": 2
    },
    {
      "path": "newblog.md",
      "url": "newblog.html",
      "content": "<!-- we will use this comment to store meta info\r\n{\r\n    \"title\": \"Some analysis\" ,\r\n    \"author\": \"Matan\",\r\n    \"tags\": [\"Analysis\", \"topology\"]\r\n}\r\n-->\r\n\r\nI claim that yes! there does exist such a function (which was not actually my first intuition). Here is the construction: \r\n\\begin{itemize}\r\n    \\item Let all $f(q) =0$ for all $q\\in{}(-\\sqrt{2},\\sqrt{2})$\r\n    \\item Let $f(q)=i\\in{}$\\ints$^+$ for all $q\\in{}(i*\\sqrt{2},(i+1)*\\sqrt{2})$\r\n    \\item Let $f(q)=i\\in{}$\\ints$^-$ for all $q\\in{}((i+1)*\\sqrt{2},i*\\sqrt{2})$\r\n\\end{itemize}\r\n\r\nClearly this function is from \\rats{} to \\ints{} and is also clearly onto. Let us prove cont. using the sequencial defn. Let \\seq{q}$\\subseteq $\\rats{} be a convergent sequence, converging to $q$. $q$ is in one of the invtervals we set up, since those intervals cover all of $q$. Moreover, it's in only on interval, since the intervals are disjoint. WLOG, assume $q\\in{}((i*\\sqrt{2},(i+1)*\\sqrt{2})$ for some $i\\in{}\\mathbb{Z}^+$. \r\n\r\nThen, take $\\rho=\\mathrm{min}\\{|q-i*\\sqrt{2}|,|(i+1)*\\sqrt{2}|\\}$. Due to the convergence of \\seq{q}, we can find $N$ s.t for $n>N$ $|q_n-q|<\\rho$. Then let $\\epsilon>0$ be given arbitarly and let $\\delta=\\rho$. It is satisfied that $0=|f(q_n)-f(q)|<\\epsilon$ for all $|q_n-q|<\\rho{}$. Thus, $f$ is cont. and the proof is complete.",
      "html": "<!-- we will use this comment to store meta info\n{\n    \"title\": \"Some analysis\" ,\n    \"author\": \"Matan\",\n    \"tags\": [\"Analysis\", \"topology\"]\n}\n-->\n<p>I claim that yes! there does exist such a function (which was not actually my first intuition). Here is the construction:\n\\begin{itemize}\n\\item Let all $f(q) =0$ for all $q\\in{}(-\\sqrt{2},\\sqrt{2})$\n\\item Let $f(q)=i\\in{}$\\ints$^+$ for all $q\\in{}(i*\\sqrt{2},(i+1)<em>\\sqrt{2})$\n\\item Let $f(q)=i\\in{}$\\ints$^-$ for all $q\\in{}((i+1)</em>\\sqrt{2},i*\\sqrt{2})$\n\\end{itemize}</p>\n<p>Clearly this function is from \\rats{} to \\ints{} and is also clearly onto. Let us prove cont. using the sequencial defn. Let \\seq{q}$\\subseteq $\\rats{} be a convergent sequence, converging to $q$. $q$ is in one of the invtervals we set up, since those intervals cover all of $q$. Moreover, it’s in only on interval, since the intervals are disjoint. WLOG, assume $q\\in{}((i*\\sqrt{2},(i+1)*\\sqrt{2})$ for some $i\\in{}\\mathbb{Z}^+$.</p>\n<p>Then, take $\\rho=\\mathrm{min}{|q-i*\\sqrt{2}|,|(i+1)*\\sqrt{2}|}$. Due to the convergence of \\seq{q}, we can find $N$ s.t for $n&gt;N$ $|q_n-q|&lt;\\rho$. Then let $\\epsilon&gt;0$ be given arbitarly and let $\\delta=\\rho$. It is satisfied that $0=|f(q_n)-f(q)|&lt;\\epsilon$ for all $|q_n-q|&lt;\\rho{}$. Thus, $f$ is cont. and the proof is complete.</p>\n",
      "id": 3
    }
  ]
}