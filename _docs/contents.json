{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "file",
      "value": "Basics.md"
    },
    {
      "type": "file",
      "value": "TomExample.md"
    },
    {
      "type": "file",
      "value": "angel.md"
    },
    {
      "type": "file",
      "value": "banana.md"
    },
    {
      "type": "file",
      "value": "hannahExample.md"
    },
    {
      "type": "file",
      "value": "heiku.md"
    },
    {
      "type": "file",
      "value": "hello.md"
    },
    {
      "type": "file",
      "value": "ophirExample.md"
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "<!--{\r\n    \"title\": \"INDEX! WHOOHOO\" ,\r\n    \"author\": \"Cute girl with bangs\",\r\n    \"tags\": [\"TrippingIndex\", \"toStokedIndex\"]\r\n}-->\r\n# Index page \r\n\r\nHere is an *important* index page\r\n\r\n\r\n```python \r\n    def index(): \r\n        return \"important\" \r\n```\r\n\r\nI am a math man $\\int_a^b  f(x) dx$\r\n\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n- first\r\n- second\r\n- third\r\n",
      "html": "<!--{\n    \"title\": \"INDEX! WHOOHOO\" ,\n    \"author\": \"Cute girl with bangs\",\n    \"tags\": [\"TrippingIndex\", \"toStokedIndex\"]\n}-->\n<h1 id=\"index-page\">Index page <a class=\"heading-anchor-permalink\" href=\"#index-page\">#</a></h1>\n<p>Here is an <em>important</em> index page</p>\n<pre><code class=\"language-python\">    def index(): \n        return &quot;important&quot; \n</code></pre>\n<p>I am a math man $\\int_a^b  f(x) dx$</p>\n<ul>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n<li>first</li>\n<li>second</li>\n<li>third</li>\n</ul>\n",
      "id": 0
    },
    {
      "path": "Basics.md",
      "url": "Basics.html",
      "content": "<!--{\r\n    \"title\": \"Golang Basics\" ,\r\n    \"author\": \"Ishaan Dham\",\r\n    \"tags\": [\"Go\", \"Golang\", \"Programming Language\"]\r\n}-->\r\n\r\n# Basics\r\n\r\n$$ f(x) = x^2 $$\r\n\r\n## Declaration\r\n\r\nIn package scope everything must have a keyword - func, var. Use \"var\" to declare a variable or use \":=\" short-assignment operator.\r\n\r\n``` Go\r\npackage main\r\n\r\nvar num int = 4\r\nconst Pi = 3.14 // constants - cannot use := for them\r\nconst day string = \"Monday\"\r\n\r\nvar (\r\n    num2 = 5\r\n    str string // default is \"\"\r\n)\r\n\r\nfunc declareStuff() {\r\n    num3 := 6 // can use short assignment here.\r\n    str2 := \"hi\"\r\n}\r\n```\r\n\r\n## Types\r\n\r\n* bool\r\n* string\r\n* int  int8  int16  int32  int64\r\n* uint uint8 uint16 uint32 uint64 uintptr\r\n* byte // alias for uint8\r\n* rune // alias for int32\r\n     // represents a Unicode code point\r\n* float32 float64\r\n* complex64 complex128\r\n\r\nAn \"int\", \"unint\", \"uintptr\" are 64 or 32 bits depending on the machine.\r\n\r\n### Default Values\r\n\r\n0 for numeric types, false for the boolean type, and\r\n\"\" (the empty string) for strings.\r\n\r\n### Type Conversions\r\n\r\nGo requires explicit type conversions unlike C.\r\n\r\n``` Go\r\nvar i int  = 42\r\nvar f float64 = float64(i)\r\n// or f := float64(i)\r\nvar u uint = uint(f)\r\n// Hence \r\nvar f float64 = i // this would be an error\r\n```\r\n\r\nWhen using := (short assignment) the type pf the variable depends on the **precision** of the literal. Example - 42 : int, 3.142 : float64, 0.86 + 0.5i : complex128\r\n\r\n## Control Structures\r\n\r\n### Loops\r\n\r\n``` Go\r\n// for loop\r\nfor i := 0; i < 10; i++ {\r\n    sum += i\r\n}\r\n// init and post statements are optional\r\nfor ; x < 100; {\r\n    //do something\r\n}\r\n// While in C is without init and post statements\r\nfor x < 1000 {\r\n    // this is a while loop!\r\n}\r\n```\r\n\r\n### Branching\r\n``` Go\r\nif x < 0 {\r\n    fmt.Println(\"number is negative\")\r\n}\r\n// you can add a statement in if\r\nif v := math.Pow(x, n); v < lim {\r\n    // v is scope of if\r\n}\r\n```",
      "html": "<!--{\n    \"title\": \"Golang Basics\" ,\n    \"author\": \"Ishaan Dham\",\n    \"tags\": [\"Go\", \"Golang\", \"Programming Language\"]\n}-->\n<h1 id=\"basics\">Basics <a class=\"heading-anchor-permalink\" href=\"#basics\">#</a></h1>\n<p>$$ f(x) = x^2 $$</p>\n<h2 id=\"declaration\">Declaration <a class=\"heading-anchor-permalink\" href=\"#declaration\">#</a></h2>\n<p>In package scope everything must have a keyword - func, var. Use “var” to declare a variable or use “:=” short-assignment operator.</p>\n<pre><code class=\"language-Go\">package main\n\nvar num int = 4\nconst Pi = 3.14 // constants - cannot use := for them\nconst day string = &quot;Monday&quot;\n\nvar (\n    num2 = 5\n    str string // default is &quot;&quot;\n)\n\nfunc declareStuff() {\n    num3 := 6 // can use short assignment here.\n    str2 := &quot;hi&quot;\n}\n</code></pre>\n<h2 id=\"types\">Types <a class=\"heading-anchor-permalink\" href=\"#types\">#</a></h2>\n<ul>\n<li>bool</li>\n<li>string</li>\n<li>int  int8  int16  int32  int64</li>\n<li>uint uint8 uint16 uint32 uint64 uintptr</li>\n<li>byte // alias for uint8</li>\n<li>rune // alias for int32\n// represents a Unicode code point</li>\n<li>float32 float64</li>\n<li>complex64 complex128</li>\n</ul>\n<p>An “int”, “unint”, “uintptr” are 64 or 32 bits depending on the machine.</p>\n<h3 id=\"default-values\">Default Values <a class=\"heading-anchor-permalink\" href=\"#default-values\">#</a></h3>\n<p>0 for numeric types, false for the boolean type, and\n“” (the empty string) for strings.</p>\n<h3 id=\"type-conversions\">Type Conversions <a class=\"heading-anchor-permalink\" href=\"#type-conversions\">#</a></h3>\n<p>Go requires explicit type conversions unlike C.</p>\n<pre><code class=\"language-Go\">var i int  = 42\nvar f float64 = float64(i)\n// or f := float64(i)\nvar u uint = uint(f)\n// Hence \nvar f float64 = i // this would be an error\n</code></pre>\n<p>When using := (short assignment) the type pf the variable depends on the <strong>precision</strong> of the literal. Example - 42 : int, 3.142 : float64, 0.86 + 0.5i : complex128</p>\n<h2 id=\"control-structures\">Control Structures <a class=\"heading-anchor-permalink\" href=\"#control-structures\">#</a></h2>\n<h3 id=\"loops\">Loops <a class=\"heading-anchor-permalink\" href=\"#loops\">#</a></h3>\n<pre><code class=\"language-Go\">// for loop\nfor i := 0; i &lt; 10; i++ {\n    sum += i\n}\n// init and post statements are optional\nfor ; x &lt; 100; {\n    //do something\n}\n// While in C is without init and post statements\nfor x &lt; 1000 {\n    // this is a while loop!\n}\n</code></pre>\n<h3 id=\"branching\">Branching <a class=\"heading-anchor-permalink\" href=\"#branching\">#</a></h3>\n<pre><code class=\"language-Go\">if x &lt; 0 {\n    fmt.Println(&quot;number is negative&quot;)\n}\n// you can add a statement in if\nif v := math.Pow(x, n); v &lt; lim {\n    // v is scope of if\n}\n</code></pre>\n",
      "id": 1
    },
    {
      "path": "TomExample.md",
      "url": "TomExample.html",
      "content": "<!-- we will use this comment to store meta info\r\n{\r\n    \"title\": \"Tom's example\" ,\r\n    \"author\": \"Tom Stoev\",\r\n    \"tags\": [\"chick-magnet\"]\r\n}\r\n-->\r\n\r\n# Learning in the Frat\r\n\r\nBig grinding in the basemant $$f(x)= x^2+ exp(\\sqrt{3x})$$\r\n\r\n**hello world**",
      "html": "<!-- we will use this comment to store meta info\n{\n    \"title\": \"Tom's example\" ,\n    \"author\": \"Tom Stoev\",\n    \"tags\": [\"chick-magnet\"]\n}\n-->\n<h1 id=\"learning-in-the-frat\">Learning in the Frat <a class=\"heading-anchor-permalink\" href=\"#learning-in-the-frat\">#</a></h1>\n<p>Big grinding in the basemant $$f(x)= x^2+ exp(\\sqrt{3x})$$</p>\n<p><strong>hello world</strong></p>\n",
      "id": 2
    },
    {
      "path": "angel.md",
      "url": "angel.html",
      "content": "<!-- we will use this comment to store meta info\r\n{\r\n    \"title\": \"This is Angel's example\" ,\r\n    \"author\": \"Matan and Angel\",\r\n    \"tags\": [\"UI_UX\"]\r\n}\r\n-->\r\n\r\n# Hello World\r\n\r\n`console.log('hello world!)` $$f(x_1)=x_1^2$$\r\n\r\n",
      "html": "<!-- we will use this comment to store meta info\n{\n    \"title\": \"This is Angel's example\" ,\n    \"author\": \"Matan and Angel\",\n    \"tags\": [\"UI_UX\"]\n}\n-->\n<h1 id=\"hello-world\">Hello World <a class=\"heading-anchor-permalink\" href=\"#hello-world\">#</a></h1>\n<p><code>console.log('hello world!)</code> $$f(x_1)=x_1^2$$</p>\n",
      "id": 3
    },
    {
      "path": "banana.md",
      "url": "banana.html",
      "content": "<!-- we will use this comment to store meta info\r\n{\r\n    \"title\": \"This is the banana page.\" ,\r\n    \"author\": \"Matan Shtepel\",\r\n    \"tags\": [\"example\", \"relationship help\"]\r\n}\r\n-->\r\n\r\n\r\n# Banana page \r\n\r\n```python \r\n    def banana(): \r\n        return \"banana\" \r\n```\r\n\r\n",
      "html": "<!-- we will use this comment to store meta info\n{\n    \"title\": \"This is the banana page.\" ,\n    \"author\": \"Matan Shtepel\",\n    \"tags\": [\"example\", \"relationship help\"]\n}\n-->\n<h1 id=\"banana-page\">Banana page <a class=\"heading-anchor-permalink\" href=\"#banana-page\">#</a></h1>\n<pre><code class=\"language-python\">    def banana(): \n        return &quot;banana&quot; \n</code></pre>\n",
      "id": 4
    },
    {
      "path": "hannahExample.md",
      "url": "hannahExample.html",
      "content": "<!--{\r\n    \"title\": \"Best food on the hill!\" ,\r\n    \"author\": \"Hannah Garcia\",\r\n    \"tags\": [\"food review\"]\r\n}-->\r\n\r\n# Best food on the hill!\r\n\r\nBPlate is, by far, the $f(x)=1$ food on the hill. ",
      "html": "<!--{\n    \"title\": \"Best food on the hill!\" ,\n    \"author\": \"Hannah Garcia\",\n    \"tags\": [\"food review\"]\n}-->\n<h1 id=\"best-food-on-the-hill!\">Best food on the hill! <a class=\"heading-anchor-permalink\" href=\"#best-food-on-the-hill!\">#</a></h1>\n<p>BPlate is, by far, the $f(x)=1$ food on the hill.</p>\n",
      "id": 5
    },
    {
      "path": "heiku.md",
      "url": "heiku.html",
      "content": "<!--{\r\n    \"title\": \"Hyde's Heiku\" ,\r\n    \"author\": \"Matan Shtepel, quoting hyde\",\r\n    \"tags\": [\"Tag1\", \"Tag2\", \"Tag3\"]\r\n}-->\r\n\r\n# Hyde's Heiku. \r\nMy first posts must be dedicated to the ancient $japanese$ art of rhyme, often told to $\\epsilon{}$ starting from a young age. Here is a personal favorite, orginating all the way from teh great $70^s$ show. \r\n\r\n\"I'm gonna explain my feelings to you through a highly disciplined form of Japanese poetry - haiku:\r\n\r\n#### My heart aches with pain\r\n#### When I see you, I vomit\r\n#### Die away from me\"\r\n \r\n*Hyde, That 70s Show*  ",
      "html": "<!--{\n    \"title\": \"Hyde's Heiku\" ,\n    \"author\": \"Matan Shtepel, quoting hyde\",\n    \"tags\": [\"Tag1\", \"Tag2\", \"Tag3\"]\n}-->\n<h1 id=\"hyde%E2%80%99s-heiku.\">Hyde’s Heiku. <a class=\"heading-anchor-permalink\" href=\"#hyde%E2%80%99s-heiku.\">#</a></h1>\n<p>My first posts must be dedicated to the ancient $japanese$ art of rhyme, often told to $\\epsilon{}$ starting from a young age. Here is a personal favorite, orginating all the way from teh great $70^s$ show.</p>\n<p>&quot;I’m gonna explain my feelings to you through a highly disciplined form of Japanese poetry - haiku:</p>\n<h4 id=\"my-heart-aches-with-pain\">My heart aches with pain <a class=\"heading-anchor-permalink\" href=\"#my-heart-aches-with-pain\">#</a></h4>\n<h4 id=\"when-i-see-you%2C-i-vomit\">When I see you, I vomit <a class=\"heading-anchor-permalink\" href=\"#when-i-see-you%2C-i-vomit\">#</a></h4>\n<h4 id=\"die-away-from-me%22\">Die away from me&quot; <a class=\"heading-anchor-permalink\" href=\"#die-away-from-me%22\">#</a></h4>\n<p><em>Hyde, That 70s Show</em></p>\n",
      "id": 6
    },
    {
      "path": "hello.md",
      "url": "hello.html",
      "content": "<!--{\r\n    \"title\": \"Hello Blog\" ,\r\n    \"author\": \"Ishaan\",\r\n    \"tags\": [\"what is a valid\", \"this is cool\", \"awesome\"]\r\n}-->\r\n# Test Blog\r\n**hello**\r\n$$ f(x) = x^2 $$\r\n",
      "html": "<!--{\n    \"title\": \"Hello Blog\" ,\n    \"author\": \"Ishaan\",\n    \"tags\": [\"what is a valid\", \"this is cool\", \"awesome\"]\n}-->\n<h1 id=\"test-blog\">Test Blog <a class=\"heading-anchor-permalink\" href=\"#test-blog\">#</a></h1>\n<p><strong>hello</strong>\n$$ f(x) = x^2 $$</p>\n",
      "id": 7
    },
    {
      "path": "ophirExample.md",
      "url": "ophirExample.html",
      "content": "<!-- we will use this comment to store meta info\r\n{\r\n    \"title\": \"A Day In the Life of Ophir\" ,\r\n    \"author\": \"Matan and Ophir\",\r\n    \"tags\": [\"cool stuff\", \"science!\",\"Jews!\", \"DND\"]\r\n}\r\n-->\r\n\r\n# A Day In the Life of Ophir\r\n**ophir is here he is cool**. $$f(x)=x^2$$ Ophir! Ophir! ",
      "html": "<!-- we will use this comment to store meta info\n{\n    \"title\": \"A Day In the Life of Ophir\" ,\n    \"author\": \"Matan and Ophir\",\n    \"tags\": [\"cool stuff\", \"science!\",\"Jews!\", \"DND\"]\n}\n-->\n<h1 id=\"a-day-in-the-life-of-ophir\">A Day In the Life of Ophir <a class=\"heading-anchor-permalink\" href=\"#a-day-in-the-life-of-ophir\">#</a></h1>\n<p><strong>ophir is here he is cool</strong>. $$f(x)=x^2$$ Ophir! Ophir!</p>\n",
      "id": 8
    }
  ]
}